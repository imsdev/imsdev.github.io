// jQuery plugin that provides search functionality across site
(function ($) {
  // $.fn is an alias for jQuery.prototype
    // tipuesearch method added to jQuery object
  $.fn.tipuesearch = function (searchInput, searchInputId, searchResults, searchBarType, options) {
    // Sets up default values for search options
    var set = $.extend( // Merges default options with user-provided options
      {
        contentLocation: "tipuesearch/tipuesearch_content.json", // location of JSON file containing searchable content
        contextBuffer: 60, // number of characters before and after matched term to include in context snipppet
        contextLength: 60, // max length of context snippet
        contextStart: 90, // min character position of the first matched term to include in context snippet
        debug: false, // whether to display debugging info in search results
        descriptiveWords: 25, // number of words to use as a description for each search result
        highlightTerms: true, // whether to highlight matched terms in search results
        liveContent: "*", // CSS selector used to extract content from webpage
        liveDescription: "*", // CSS selector used to extract description from webpage
        minimumLength: 2, // min length of search query
        mode: "static", // if "static," content location points to tipuesearch_content.json; if "live," content location points to JSON file generated by build_index.py script
        newWindow: false, // whether to open search result in new window
        show: 9, // number of search results to display per page
        showContext: true, // whether to show context snippets with search results
        showRelated: true, // whether to show related searches
        showTime: false, // whether to show time with search results
        showTitleCount: false, // whether to display number of search results
        showURL: false, // whether to show url with search results
        wholeWords: false,  // whether to match whole words only
      },
      options
    );
    return this.each(function () {
      // Search index is loaded into tipuesearch_in variable containing page information
      var tipuesearch_in = { pages: [] };
      $.ajaxSetup({ async: false });
      var tipuesearch_t_c = 0;
      // Display search result dropdown
      $("#tipue_search_content")
        .hide()
        .html(
          '<div class="tipue_search_spinner"><div class="tipue_search_rect1"></div><div class="tipue_search_rect2"></div><div class="rect3"></div></div>'
        )
        .show();
      // Search index can be loaded dynamically from HTML content of page
      if (set.mode == "live") {
        for (var i = 0; i < tipuesearch_pages.length; i++) {
          $.get(tipuesearch_pages[i]).done(function (html) {
            var cont = $(set.liveContent, html).text();
            cont = cont.replace(/\s+/g, " ");
            var desc = $(set.liveDescription, html).text();
            desc = desc.replace(/\s+/g, " ");
            var t_1 = html.toLowerCase().indexOf("<title>");
            var t_2 = html.toLowerCase().indexOf("</title>", t_1 + 7);
            if (t_1 != -1 && t_2 != -1) {
              var tit = html.slice(t_1 + 7, t_2);
            } else {
              var tit = tipuesearch_string_1;
            }
            tipuesearch_in.pages.push({
              title: tit,
              text: desc,
              tags: cont,
              url: tipuesearch_pages[i],
            });
          });
        }
      }
      // Search index can also be loaded from JSON file
      if (set.mode == "json") {
        // tipuesearch_in populated with content from JSON file
        $.getJSON(set.contentLocation).done(function (json) {
          tipuesearch_in = $.extend({}, json);
        });
      }
      // tipuesearch variable?
      if (set.mode == "static") {
        tipuesearch_in = $.extend({}, tipuesearch);
      }
      // Set search target to new window if specified
      var tipue_search_w = "";
      if (set.newWindow) {
        tipue_search_w = ' target="_blank"';
      }
      // Function retrieves search query from URL parameters
      function getURLP(name) {
        // Gets query string of current URL
        var _locSearch = location.search;
        // Create regex pattern that matches requested parameter
        var _splitted = new RegExp(
          "[?|&]" + name + "=" + "([^&;]+?)(&|#|;|$)"
        ).exec(_locSearch) || [, ""];
        var searchString = _splitted[1].replace(/\+/g, "%20");
        // Matched value is decoded using decodeURICompoentnt or unescape functions
        try {
          searchString = decodeURIComponent(searchString);
        } catch (e) {
          searchString = unescape(searchString);
        }
        return searchString || null;
      }
      // Calls getURLP for search input
      if (getURLP(searchInput)) {
        $(searchInputId).val(getURLP(searchInput));
        getTipueSearch(0, true, set, searchResults, searchInputId, tipuesearch_in, tipue_search_w);
      // For web component input, assign value if searchInput is not null
      } else if (searchInput != null && searchBarType == 'web-component') {
        $(searchInputId).val(searchInput);
        getTipueSearch(0, true, set, searchResults, searchInputId, tipuesearch_in, tipue_search_w);
      }
      // Keyup event handler binded with search input field - does not affect functionality when commented out?
      // $(this).keyup(function (event) {
      //   if (event.keyCode == "13") {
      //     getTipueSearch(0, true);
      //   }
      // });
    });
  };
})(jQuery);

// Function performs search and displays results
// start - indicates starting index of search results to display
// replace - whether to apply replacement rules defined in tipuesearch_set.js
function getTipueSearch(start, replace, set, searchResults, searchInputId, tipuesearch_in, tipue_search_w) {
  var out = "";
  var show_replace = false;
  var show_stop = false;
  var standard = true;
  var c = 0;
  found = [];
  var d_o = $(searchInputId).val();
  var d = d_o.toLowerCase();
  d = $.trim(d);
  // Checks if search query meets length requirements and use valid search terms
  if (
    (d.match('^"') && d.match('"$')) ||
    (d.match("^'") && d.match("'$"))
  ) {
    standard = false;
  }
  var d_w = d.split(" ");
  // Iterates through search index and calculates score for each result based on presence of search terms in title, content, tags, and URL
    // Score calculated based on number of matches and weighting factors in tipuesearch_set.js
  if (standard) {
    d = "";
    for (var i = 0; i < d_w.length; i++) {
      var a_w = true;
      for (var f = 0; f < tipuesearch_stop_words.length; f++) {
        if (d_w[i] == tipuesearch_stop_words[f]) {
          a_w = false;
          show_stop = true;
        }
      }
      if (a_w) {
        d = d + " " + d_w[i];
      }
    }
    d = $.trim(d);
    d_w = d.split(" ");
  } else {
    d = d.substring(1, d.length - 1);
  }
  if (d.length >= set.minimumLength) {
    if (standard) {
      if (replace) {
        var d_r = d;
        for (var i = 0; i < d_w.length; i++) {
          for (var f = 0; f < tipuesearch_replace.words.length; f++) {
            if (d_w[i] == tipuesearch_replace.words[f].word) {
              d = d.replace(
                d_w[i],
                tipuesearch_replace.words[f].replace_with
              );
              show_replace = true;
            }
          }
        }
        d_w = d.split(" ");
      }
      var d_t = d;
      for (var i = 0; i < d_w.length; i++) {
        for (var f = 0; f < tipuesearch_stem.words.length; f++) {
          if (d_w[i] == tipuesearch_stem.words[f].word) {
            d_t = d_t + " " + tipuesearch_stem.words[f].stem;
          }
        }
      }
      d_w = d_t.split(" ");
      for (var i = 0; i < tipuesearch_in.pages.length; i++) {
        var score = 0;
        var s_t = tipuesearch_in.pages[i].text;
        for (var f = 0; f < d_w.length; f++) {
          if (set.wholeWords) {
            var pat = new RegExp("\\b" + d_w[f] + "\\b", "gi");
          } else {
            var pat = new RegExp(d_w[f], "gi");
          }
          if (tipuesearch_in.pages[i].title.search(pat) != -1) {
            var m_c = tipuesearch_in.pages[i].title.match(pat).length;
            score += 20 * m_c;
          }
          if (tipuesearch_in.pages[i].text.search(pat) != -1) {
            var m_c = tipuesearch_in.pages[i].text.match(pat).length;
            score += 20 * m_c;
          }
          if (tipuesearch_in.pages[i].tags.search(pat) != -1) {
            var m_c = tipuesearch_in.pages[i].tags.match(pat).length;
            score += 10 * m_c;
          }
          if (tipuesearch_in.pages[i].url.search(pat) != -1) {
            score += 20;
          }
          if (score != 0) {
            for (var e = 0; e < tipuesearch_weight.weight.length; e++) {
              if (
                tipuesearch_in.pages[i].url ==
                tipuesearch_weight.weight[e].url
              ) {
                score += tipuesearch_weight.weight[e].score;
              }
            }
          }
          if (d_w[f].match("^-")) {
            pat = new RegExp(d_w[f].substring(1), "i");
            if (
              tipuesearch_in.pages[i].title.search(pat) != -1 ||
              tipuesearch_in.pages[i].text.search(pat) != -1 ||
              tipuesearch_in.pages[i].tags.search(pat) != -1
            ) {
              score = 0;
            }
          }
        }
        if (score != 0) {
          found.push({
            score: score,
            title: tipuesearch_in.pages[i].title,
            desc: s_t,
            url: tipuesearch_in.pages[i].url,
          });
          c++;
        }
      }
    } else {
      for (var i = 0; i < tipuesearch_in.pages.length; i++) {
        var score = 0;
        var s_t = tipuesearch_in.pages[i].text;
        var pat = new RegExp(d, "gi");
        if (tipuesearch_in.pages[i].title.search(pat) != -1) {
          var m_c = tipuesearch_in.pages[i].title.match(pat).length;
          score += 20 * m_c;
        }
        if (tipuesearch_in.pages[i].text.search(pat) != -1) {
          var m_c = tipuesearch_in.pages[i].text.match(pat).length;
          score += 20 * m_c;
        }
        if (tipuesearch_in.pages[i].tags.search(pat) != -1) {
          var m_c = tipuesearch_in.pages[i].tags.match(pat).length;
          score += 10 * m_c;
        }
        if (tipuesearch_in.pages[i].url.search(pat) != -1) {
          score += 20;
        }
        if (score != 0) {
          for (var e = 0; e < tipuesearch_weight.weight.length; e++) {
            if (
              tipuesearch_in.pages[i].url ==
              tipuesearch_weight.weight[e].url
            ) {
              score += tipuesearch_weight.weight[e].score;
            }
          }
        }
        if (score != 0) {
          found.push({
            score: score,
            title: tipuesearch_in.pages[i].title,
            desc: s_t,
            url: tipuesearch_in.pages[i].url,
          });
          c++;
        }
      }
    }
    if (c != 0) {
      if (set.showTitleCount && tipuesearch_t_c == 0) {
        var title = document.title;
        document.title = "(" + c + ") " + title;
        tipuesearch_t_c++;
      }
      if (show_replace) {
        out +=
          '<div id="tipue_search_warning">' +
          tipuesearch_string_2 +
          " " +
          d +
          ". " +
          tipuesearch_string_3 +
          ' <a id="tipue_search_replaced">' +
          d_r +
          "</a></div>";
      }
      if (c == 1) {
        out +=
          '<div id="tipue_search_results_count">' + tipuesearch_string_4;
      } else {
        c_c = c.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        out +=
          '<div id="tipue_search_results_count">' +
          c_c +
          " " +
          tipuesearch_string_5;
      }
      if (set.showTime) {
        var endTimer = new Date().getTime();
        var time = (endTimer - startTimer) / 1000;
        out += " (" + time.toFixed(2) + " " + tipuesearch_string_14 + ")";
        set.showTime = false;
      }
      out += "</div>";
      found.sort(function (a, b) {
        return b.score - a.score;
      });
      var l_o = 0;
      for (var i = 0; i < found.length; i++) {
        if (l_o >= start && l_o < set.show + start) {
          out +=
            '<div class="result"><button class="cordion" aria-label="Drop-down arrow" tabindex="-1"><i class="fa fa-angle-right" tabindex="0" style="font-size:24px"></i></button><div class="tipue_search_content_title"><a href="' +
            found[i].url +
            '"' +
            tipue_search_w +
            ">" +
            found[i].title +
            "</a></div></div>";
          if (set.debug) {
            out +=
              '<div class="tipue_search_content_debug">Score: ' +
              found[i].score +
              "</div>";
          }
          if (set.showURL) {
            var s_u = found[i].url.toLowerCase();
            if (s_u.indexOf("http://") == 0) {
              s_u = s_u.slice(7);
            }
            out +=
              '<div class="tipue_search_content_url"><a href="' +
              found[i].url +
              '"' +
              tipue_search_w +
              ">" +
              s_u +
              "</a></div>";
          }
          if (found[i].desc) {
            var t = found[i].desc;
            if (set.showContext) {
              d_w = d.split(" ");
              var s_1 = found[i].desc.toLowerCase().indexOf(d_w[0]);
              if (s_1 > set.contextStart) {
                var t_1 = t.substr(s_1 - set.contextBuffer);
                var s_2 = t_1.indexOf(" ");
                t_1 = t.substr(s_1 - set.contextBuffer + s_2);
                t_1 = $.trim(t_1);
                if (t_1.length > set.contextLength) {
                  t = "... " + t_1;
                }
              }
            }
            if (standard) {
              d_w = d.split(" ");
              for (var f = 0; f < d_w.length; f++) {
                if (set.highlightTerms) {
                  var patr = new RegExp("(" + d_w[f] + ")", "gi");
                  t = t.replace(patr, "<h0011>$1<h0012>");
                }
              }
            } else if (set.highlightTerms) {
              var patr = new RegExp("(" + d + ")", "gi");
              t = t.replace(
                patr,
                '<span class="tipue_search_content_bold">$1</span>'
              );
            }
            var t_d = "";
            var t_w = t.split(" ");
            if (t_w.length < set.descriptiveWords) {
              t_d = t;
            } else {
              for (var f = 0; f < set.descriptiveWords; f++) {
                t_d += t_w[f] + " ";
              }
            }
            t_d = $.trim(t_d);
            if (t_d.charAt(t_d.length - 1) != ".") {
              t_d += " ...";
            }
            t_d = t_d.replace(
              /h0011/g,
              'span class="tipue_search_content_bold"'
            );
            t_d = t_d.replace(/h0012/g, "/span");
            out +=
              '<div class="tipue_search_content_text">' + t_d + "</div>";
          }
        }
        l_o++;
      }
      // If configured, related searches are displayed
      if (set.showRelated && standard) {
        f = 0;
        for (var i = 0; i < tipuesearch_related.searches.length; i++) {
          if (d == tipuesearch_related.searches[i].search) {
            if (show_replace) {
              d_o = d;
            }
            if (!f) {
              out +=
                '<div class="tipue_search_related_title">' +
                tipuesearch_string_15 +
                ' <span class="tipue_search_related_bold">' +
                d_o +
                '</span></div><div class="tipue_search_related_cols">';
            }
            out +=
              '<div class="tipue_search_related_text"><a class="tipue_search_related" id="' +
              tipuesearch_related.searches[i].related +
              '">';
            if (tipuesearch_related.searches[i].before) {
              out +=
                '<span class="tipue_search_related_before">' +
                tipuesearch_related.searches[i].before +
                "</span> ";
            }
            out += tipuesearch_related.searches[i].related;
            if (tipuesearch_related.searches[i].after) {
              out +=
                ' <span class="tipue_search_related_after">' +
                tipuesearch_related.searches[i].after +
                "</span>";
            }
            out += "</a></div>";
            f++;
          }
        }
        if (f) {
          out += "</div>";
        }
      }
      if (c > set.show) {
        var pages = Math.ceil(c / set.show);
        var page = start / set.show;
        out +=
          '<nav aria-label="search pagination"><div id="tipue_search_foot"><ul id="tipue_search_foot_boxes">';
        if (start > 0) {
          out +=
            '<li><a class="tipue_search_foot_box" tabindex="0" role="button" accesskey="b" id="' +
            (start - set.show) +
            "_" +
            replace +
            '_arrow">' +
            tipuesearch_string_6 +
            "</a></li>";
        }
        if (page <= 2) {
          var p_b = pages;
          if (pages > 3) {
            p_b = 3;
          }
          for (var f = 0; f < p_b; f++) {
            if (f == page) {
              out +=
                '<li class="current">' +
                (f + 1) +
                "</li>";
            } else {
              out +=
                '<li><a class="tipue_search_foot_box" role="button" tabindex="0" id="' +
                f * set.show +
                "_" +
                replace +
                '">' +
                (f + 1) +
                "</a></li>";
            }
          }
        } else {
          var p_b = page + 2;
          if (p_b > pages) {
            p_b = pages;
          }
          for (var f = page - 1; f < p_b; f++) {
            if (f == page) {
              out +=
                '<li class="current">' +
                (f + 1) +
                "</li>";
            } else {
              out +=
                '<li><a class="tipue_search_foot_box" role="button" tabindex="0" id="' +
                f * set.show +
                "_" +
                replace +
                '">' +
                (f + 1) +
                "</a></li>";
            }
          }
        }
        if (page + 1 != pages) {
          out +=
            '<li><a class="tipue_search_foot_box" role="button" tabindex="0" accesskey="m" id="' +
            (start + set.show) +
            "_" +
            replace +
            '_arrow">' +
            tipuesearch_string_7 +
            "</a></li>";
        }
        out += "</ul></div></nav>";
      }
    } else {
      out +=
        '<div id="tipue_search_warning">' +
        tipuesearch_string_8 +
        "</div>";
    }
  } else {
    if (show_stop) {
      out +=
        '<div id="tipue_search_warning">' +
        tipuesearch_string_8 +
        ". " +
        tipuesearch_string_9 +
        "</div>";
    } else if (d_o.length != 0) {
      out +=
        '<div id="tipue_search_warning">' +
        tipuesearch_string_10 + 
        "</div>";
      // if (set.minimumLength == 1) {
      //   out +=
      //     '<div id="tipue_search_warning">' +
      //     tipuesearch_string_11 +
      //     "</div>";
      // } else {
      //   out +=
      //     '<div id="tipue_search_warning">' +
      //     tipuesearch_string_12 +
      //     " " +
      //     set.minimumLength +
      //     " " +
      //     tipuesearch_string_13 +
      //     "</div>";
      // }
    }
  }
  $(searchResults).hide().html(out).slideDown(200);
  $("#tipue_search_replaced").click(function () {
    getTipueSearch(0, false, set, searchResults, searchInputId, tipuesearch_in, tipue_search_w);
  });
  $(".tipue_search_related").click(function () {
    $(searchInputId).val($(this).attr("id"));
    getTipueSearch(0, true, set, searchResults, searchInputId, tipuesearch_in, tipue_search_w);
  });
  $(".tipue_search_foot_box").click(function () {
    console.log('test');
    var id_v = $(this).attr("id");
    var id_a = id_v.split("_");
    getTipueSearch(parseInt(id_a[0]), id_a[1], set, searchResults, searchInputId, tipuesearch_in, tipue_search_w);
  });
  $(".tipue_search_foot_box").on('keydown', function(event) {
    if (event.which === 13) {
      var id_v = $(this).attr("id");
      var id_a = id_v.split("_");
      getTipueSearch(parseInt(id_a[0]), id_a[1], set, searchResults, searchInputId, tipuesearch_in, tipue_search_w);
    }
  });

  // Pagination handling for web component
  // Get all page boxes inside shadowRoot
  const component = document.querySelector('nav-header');
  const shadow = component.shadowRoot;
  const pagination = shadow.querySelectorAll('.tipue_search_foot_box');
  // Add event listener for each box
  pagination.forEach(page => {
      page.addEventListener('click', () => {
        handlePagination(page);
      });
      page.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          handlePagination(page);
        }
      })
  })

  function handlePagination(page) {
    // Get ID and split to be used as parameters for getTipueSearch function
    const pageId = page.id;
    const pageIdArr = pageId.split('_');
    getTipueSearch(parseInt(pageIdArr[0]), pageIdArr[1], set, searchResults, searchInputId, tipuesearch_in, tipue_search_w);
    
    const accordions = shadow.querySelectorAll('.cordion');
    accordions.forEach(accordion => {
        accordion.addEventListener('click', (event) => {
          const button = event.target;
          const parent = button.parentElement;
          const grandparent = parent.parentElement;
          var arrow;
          var description;
          // Check if user clicked on button - assign variables
          if (button.classList.contains('cordion')) {
              arrow = button.firstChild;
              description = parent.nextElementSibling;
          // If user clicked on icon, change variable assignment
          } else {
              arrow = button;
              description = grandparent.nextElementSibling;
          }
          // Rotate arrow and display/hide result description
          arrow.classList.toggle('rotArrow');
          description.classList.toggle('search_content_drop');
        });
    })

    const results = shadow.querySelectorAll('.tipue_search_content_title');
    const searchResultsBox = shadow.getElementById('search-results');
    const searchInput = shadow.getElementById('search-input');
    results.forEach(result => {
      result.addEventListener('click', () => {
        // Remove input value
        searchInput.value = "";
        const input = searchInput.value;
        // Make search call
        $(searchInput).tipuesearch(input, searchInput, searchResultsBox, 'web-component');
        // Hide search results
        searchResultsBox.style.display = 'none';
      })
    })
  }
}
